
<link rel="stylesheet" href="/public/css/calendar.css">
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js'></script>
    <h1>Calendario</h1>  
    <div id="loading" style="display: none; text-align: center; margin: 20px;">
        <i class="bi bi-arrow-clockwise"></i> Cargando eventos...
    </div>
        <div id="calendar"></div>
    <%- include("partials/eventModal", { role: role, user: user }) %>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script>
        const currentUserId = '<%= user %>';
        $(document).ready(function () {
            const calendarEl = document.getElementById('calendar');

            const calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                headerToolbar: {
                    left: 'prev,next',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek'
                },

                events: function (fetchInfo, successCallback, failureCallback) {
                    $.ajax({
                        url: '/api/events', 
                        type: 'GET',
                        dataType: 'json',
                        success: function (response) {
                            const events = response.map(event => ({
                                id: event.ID, 
                                title: event.Title,
                                start: event.TimeInit, 
                                end: event.TimeEnd,
                                className: event.Status ?  event.Status : (event.OrganizerID == currentUserId ? 'organized': 'cancelled'),
                                extendedProps: { 
                                    description: event.Description,
                                    location: event.RoomName,
                                    enrollmentCount: event.EnrollmentCount,
                                    capacity: event.Capacity,
                                    organizer: event.OrganizerID,
                                    facultyName: event.FacultyName,
                                    facultyUniversity: event.FacultyUniversity,
                                    status: event.Status,
                                    eventType: event.EventType
                                }
                            }));
                            console.log(events)
                            successCallback(events); 
                        },
                        error: function (xhr, status, error) {
                            console.error("Error al cargar los eventos:", error);
                            failureCallback(error);
                        }
                    });
                },
                displayEventTime : false,
                eventDidMount: function(info) {
                    const startTime = moment(info.event.extendedProps.timeInit).format('YYYY-MM-DD HH:mm'); // Formateamos la hora de inicio
                    const description = info.event.extendedProps.description;
                    $(info.el).tooltip({
                        title: `${startTime}: ${description}`,
                        container: 'body',
                        delay: { "show": 50, "hide": 50 }
                    });
                  },
                  
                loading: function (isLoading) {
                    if (isLoading) {
                        $('#loading').show(); 
                    } else {
                        $('#loading').hide(); 
                    }
                },
                eventClick: function (info) {
                    const event = info.event;

                    const eventData = {
                        eventId: event.id,
                        title: event.title,
                        description: event.extendedProps.description,
                        initTime: event.start.toISOString(),
                        endTime: event.end.toISOString(),
                        location: `${event.extendedProps.facultyName}, ${event.extendedProps.facultyUniversity}`,
                        roomName: event.extendedProps.location,
                        organizer: event.extendedProps.organizer,
                        eventType: event.extendedProps.eventType,
                        enrollmentCount: event.extendedProps.enrollmentCount,
                        capacity: event.extendedProps.capacity,
                        enrollmentStatus: event.extendedProps.status
                    };

                    $('#eventModal').trigger('openEventModal', eventData);
                }
            });


            calendar.render();

            $(document).on('updateEvents', function (e, { eventId, enrollmentCount, capacity, enrollmentStatus }) {
                console.log("recibido ", eventId, enrollmentCount, capacity, enrollmentStatus);
    
                const event = calendar.getEventById(eventId);
                
                if (event) {
                    console.log(event)
                    event.setExtendedProp('enrollmentCount', enrollmentCount);
                    event.setExtendedProp('capacity', capacity);
                    event.setExtendedProp('status', enrollmentStatus);
                    const newClass = enrollmentStatus ? enrollmentStatus : (event.extendedProps.organizer == currentUserId ? 'organized' : 'cancelled');
                    event.setProp('classNames', newClass);
                    const badgeClass = enrollmentStatus === 'confirmed' ? 'badge-success' :
                                       enrollmentStatus === 'waiting' ? 'badge-warning' :
                                       'badge-danger';
                    const badgeText = enrollmentStatus === 'confirmed' ? 'Inscrito' :
                                      enrollmentStatus === 'waiting' ? 'En Cola' :
                                      'No Inscrito';
    
                    $(event.el).find('.list-item-important-title .badge')
                        .removeClass('badge-danger badge-warning badge-success')
                        .addClass(badgeClass)
                        .text(badgeText);
    
                    const enrollmentInfo = `${enrollmentCount} / ${capacity} inscritos`;
                    $(event.el).find('.bi-hash').parent().html(`<i class="bi bi-hash"></i> ${enrollmentInfo}`);
                }
            });

        });

        
    </script>
