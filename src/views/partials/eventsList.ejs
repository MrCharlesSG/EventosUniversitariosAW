<style>
    .list-container {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
    }
    .list-item {
        border-bottom: 1px solid #ddd;
        padding: 15px;
        cursor: pointer;
        display: flex;
        border-radius: 8px;
        flex-direction: column;
        margin-bottom: 5px;
    }
    .list-item:hover {
        background-color: #f1f1f1;
    }
    .list-title {
        font-weight: bold;
        color: #007bff;
        font-size: 1.25rem;
    }
    .list-description {
        font-size: 1rem;
        color: #6c757d;
    }
    .list-details {
        font-size: 0.9rem;
        color: #6c757d;
    }
    

    .add-event-btn {
        position: fixed;
        bottom: 5px;
        left: 5px;
    }

    
    h1 {
        font-size: 2rem;
        font-weight: 700;
        color: #343a40;
        text-align: center;
    }
    
    .filters-section {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 10px 15px;
        background-color: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }



    /* Estilo para la sección de filtros aplicados */
    .applied-filters {
        display: flex;
        align-items: center;
        justify-content: flex-start;
        font-size: 14px;
        color: #333;
        font-weight: 500;
    }

    .applied-filters span {
        margin-left: 10px;
        padding: 5px;
        background-color: #e9ecef;
        border-radius: 5px;
        font-size: 14px;
    }

    .applied-filters span:hover {
        background-color: #007bff;
        color: white;
        cursor: pointer;
    }

    .list-header {
        position: sticky;
        top: 0;
        z-index: 100; 
    }

    

</style>


<div class="">
    <div class="list-header">
        <h1><%= title %></h1> 

        <div id="filters-section" class="filters-section mb-3 mt-3">
            <button id="filter-button" class="btn btn-outline-primary">
                <img src="/public/img/filter.svg" alt="Filtros" width="20" height="20">
            </button>

            <div id="applied-filters" class="applied-filters">
                <span id="filters-text">Sin filtros</span>
            </div>
        </div>
    </div>

    <div class="accordion mb-3" style="display: none;" id="accordionPastEvents">
        <div class="list-container">
            <div class=" " id="headingPastEvents">
                <h5 class="mb-0">
                    <button class="btn text-primary" type="button" data-toggle="collapse" data-target="#collapsePastEvents" aria-expanded="false" aria-controls="collapsePastEvents">
                        <i class="fas fa-chevron-down"></i> Eventos Transcurridos
                    </button>
                </h5>
            </div>
            <div id="collapsePastEvents" class="collapse" aria-labelledby="headingPastEvents" data-parent="#accordionPastEvents">
                <div class="card-body">
                    <ul id="past-event-list" class="list-unstyled"></ul>
                </div>
            </div>
        </div>
    </div>
    <div class="list-container">
        <ul id="event-list" class="list-unstyled"></ul>

        
    </div>
</div>

<button id="scroll-to-top" class="btn btn-outline-primary" style="display: none; position: fixed; bottom: 5px; right: 5px; z-index: 1000;">
    <i class="fas fa-arrow-right" style="transform: rotate(-90deg);"></i>
</button>


<%- include("filterModal", { role: role, user: user, eventTypeList, facultyList }) %>
<%- include("eventModal", { role: role, user: user }) %>




<script>

    
        const eventsData = [];

        const eventsDoneData = [];

        const initialFilters = {
            date: null,           
            location: '',        
            locationText: '',      
            eventType: '',         
            capacity: null,        
            minCapacity: null,    
            maxCapacity: null    
        }

        let appliedFilters = initialFilters;
        
    
        document.addEventListener('DOMContentLoaded', () => {
            const currentPath = window.location.pathname;
            const apiUrl = currentPath.includes('myevents') ? '/api/events/user' : '/api/events';
            
            console.log("Llamando a la API:", apiUrl, " por user ", currentUserId);
            fetch(apiUrl)
                .then(response => response.json())
                .then(data => {
                    eventsData.push(...data); 
                    renderEvents();
                })
                .catch(error => {
                    console.error("Error al cargar los eventos:", error);
                });
        });
    
        const currentUserId = '<%= user %>';
    
        function renderEvents() {
            const eventList = document.getElementById('event-list');
            const pastEventList = document.getElementById('past-event-list');
            const accordionContainer = document.getElementById('accordionPastEvents');

            eventList.innerHTML = '';
            pastEventList.innerHTML = '';

            const now = new Date();
            const filteredEvents = eventsData.filter(event => {
                return (
                    (!appliedFilters.date || new Date(event.DateTime).toLocaleDateString() === new Date(appliedFilters.date).toLocaleDateString()) &&
                    (appliedFilters.location ? event.FacultyID == appliedFilters.location : true) &&
                    (appliedFilters.eventType ? event.EventType == appliedFilters.eventType : true) &&
                    (!appliedFilters.minCapacity || event.Capacity >= appliedFilters.minCapacity) &&
                    (!appliedFilters.maxCapacity || event.Capacity <= appliedFilters.maxCapacity)
                );
            });

            filteredEvents.forEach(event => {
                const isPastEvent = new Date(event.DateTime) < now;

                let badgeClass = '';
                let badgeText = '';

                if (event.OrganizerID !== currentUserId) {
                    switch (event.Status) {
                        case 'confirmed':
                            badgeClass = 'badge-success';
                            badgeText = 'Inscrito';
                            break;
                        case 'waiting':
                            badgeClass = 'badge-warning';
                            badgeText = 'En Cola';
                            break;
                        default:
                            badgeClass = 'badge-danger';
                            badgeText = 'No Inscrito';
                    }
                }

                const enrollmentInfo = `${event.EnrollmentCount} / ${event.Capacity} inscritos`;

                const eventItem = `
                    <li class="list-item" 
                        data-id="${event.ID}" 
                        data-organizer="${event.OrganizerID}"
                        data-title="${event.Title}" 
                        data-description="${event.Description}" 
                        data-date="${new Date(event.DateTime).toLocaleString()}" 
                        data-location-name="${event.FacultyName}" 
                        data-location-university="${event.FacultyUniversity}" 
                        data-capacity="${event.Capacity}" 
                        data-event-type="${event.EventType}"
                        data-enrollment-count="${event.EnrollmentCount}"
                        data-enrollment-status="${event.Status}">
                    
                        <div class="list-title">${event.Title} ${badgeText ? `<span class="badge ${badgeClass}">${badgeText}</span>` : ''}</div>
                        <div class="list-description">${event.Description}</div>
                        <div class="list-details d-flex flex-wrap justify-content-between">
                            <span><img src="/public/img/calendar-icon.svg" width="13" height="13" alt="Calendar"> ${new Date(event.DateTime).toLocaleString()}</span>
                            <span><img src="/public/img/ubication-icon.svg" width="13" height="13" alt="Ubicación"> ${event.FacultyName}, ${event.FacultyUniversity}</span>
                            <span><img src="/public/img/event-type-icon.svg" width="13" height="13" alt="Tipo de Evento"> ${event.EventType}</span>
                            <span><img src="/public/img/hashtag.svg" width="13" height="13" alt="Cuenta de Inscripción"> ${enrollmentInfo}</span>
                        </div>
                    </li>
                `;

                if (isPastEvent) {
                    pastEventList.innerHTML += eventItem;
                } else {
                    eventList.innerHTML += eventItem;
                }
            });

            const items = eventList.querySelectorAll('.list-item');
            items.forEach(item => {
                item.addEventListener('click', showEventModal);
            });
            /*pastEvents.forEach(event => {
                pastEventList.innerHTML += event;
            });*/
            if (pastEventList.children.length > 0) {
                
                accordionContainer.style.display = 'block'; 
            } else {
                accordionContainer.style.display = 'none'; 
            }
        
            
            updateFiltersText();
        }

        
        document.getElementById('filters-text').addEventListener('click', () => {
            appliedFilters = initialFilters;
            renderEvents(); 
            document.getElementById('filters-text').innerText = 'Sin filtros'; 
        });
        

        function updateFiltersText() {
            const filtersText = document.getElementById('filters-text');
            const appliedFiltersText = [];
        
            if (appliedFilters.date) {
                appliedFiltersText.push(`Fecha: ${new Date(appliedFilters.date).toLocaleDateString()}`);
            }
        
            if (appliedFilters.locationText) {
                appliedFiltersText.push(`Ubicación: ${appliedFilters.locationText}`);
            }
        
            if (appliedFilters.eventType) {
                appliedFiltersText.push(`Tipo: ${appliedFilters.eventType}`);
            }
        
            if (appliedFilters.capacity) {
                appliedFiltersText.push(`Capacidad total: ${appliedFilters.capacity}`);
            }
        
            if (appliedFilters.minCapacity) {
                appliedFiltersText.push(`Capacidad mínima: ${appliedFilters.minCapacity}`);
            }
        
            if (appliedFilters.maxCapacity) {
                appliedFiltersText.push(`Capacidad máxima: ${appliedFilters.maxCapacity}`);
            }
        
            filtersText.innerText = appliedFiltersText.length > 0 ? appliedFiltersText.join(', ') : 'Sin filtros';
        }
        
        
    
        document.getElementById('filter-button').addEventListener('click', () => {
            const filterModal = new bootstrap.Modal(document.getElementById('filterModal'));
            filterModal.show();
        });
    
        document.getElementById('apply-filters').addEventListener('click', () => {
            appliedFilters.date = document.getElementById('filter-date').value;
            appliedFilters.location = document.getElementById('filter-location').value;
            appliedFilters.eventType = document.getElementById('filter-type').value;
            appliedFilters.minCapacity = document.getElementById('filter-min-capacity').value;
            appliedFilters.maxCapacity = document.getElementById('filter-max-capacity').value;
        
            const selectedLocation = document.getElementById('filter-location');
            const selectedOption = selectedLocation.options[selectedLocation.selectedIndex];
            appliedFilters.locationText = selectedOption ? selectedOption.text : '';
        
            renderEvents();  
            $('#filterModal').modal('hide');
        });
        

        document.getElementById('reset-filters').addEventListener('click', () => {
            appliedFilters = initialFilters;
        
            document.getElementById('filter-date').value = '';
            document.getElementById('filter-location').value = '';
            document.getElementById('filter-type').value = '';
            document.getElementById('filter-min-capacity').value = '';
            document.getElementById('filter-max-capacity').value = '';
        
            updateFiltersText();
        
            $('#filterModal').modal('hide');
        });
        

    function showEventModal(event) {
        const item = event.currentTarget;
        const title = item.getAttribute('data-title');
        const description = item.getAttribute('data-description');
        const date = item.getAttribute('data-date');
        const locationName = item.getAttribute('data-location-name');
        const locationUniversity = item.getAttribute('data-location-university');
        const location = `${locationName}, ${locationUniversity}`;
        const organizer = item.getAttribute('data-organizer');
        const eventType = item.getAttribute('data-event-type');
        const enrollmentCount = item.getAttribute('data-enrollment-count');
        const capacity = item.getAttribute('data-capacity');
        const eventId = item.getAttribute('data-id');
        const enrollmentStatus = item.getAttribute('data-enrollment-status');
        const isEnrolled = enrollmentStatus === 'confirmed' || enrollmentStatus === 'waiting';
        let userStatus = '';
        
        if (organizer === currentUserId) {
            userStatus = 'Organizador';
        } else {
            switch (enrollmentStatus) {
                case 'confirmed':
                    userStatus = 'Inscrito';
                    break;
                case 'waiting':
                    userStatus = 'En Cola';
                    break;
                default:
                    userStatus = 'Not Inscrito';
            }
        }
    
        console.log("Is enrolled ", isEnrolled);
    
        document.getElementById('modalTitle').textContent = title;
        document.getElementById('modalDescription').textContent = description;
        document.getElementById('modalDate').textContent = date;
        document.getElementById('modalLocation').textContent = location;
        document.getElementById('modalOrganizer').textContent = organizer;
        document.getElementById('modalEventType').textContent = eventType;
        document.getElementById('modalEnrollmentCount').textContent = `${enrollmentCount} inscritos`;
        document.getElementById('modalUserStatus').textContent = userStatus;
        document.getElementById('modalCapacity').textContent = capacity;
    
        const editButton = document.getElementById('editButton');
        const signUpButton = document.getElementById('signUpButton');
        const dropOutButton = document.getElementById('dropOutButton');
    
        if (organizer === currentUserId) {
            editButton.style.display = 'inline-block';
            signUpButton.style.display = 'none';
            dropOutButton.style.display = 'none';
            if (editButton && editButton.href) {
                editButton.href = `/events/info?eventID=${eventId}`;
            }
        } else {
            editButton.style.display = 'none';
            if (isEnrolled) {
                signUpButton.style.display = 'none';
                dropOutButton.style.display = 'inline-block';
            } else {
                signUpButton.style.display = 'inline-block';
                dropOutButton.style.display = 'none';
            }
        }
    
        signUpButton.onclick = () => enrollEvent(eventId);
        dropOutButton.onclick = () => unenrollEvent(eventId);
        $('#eventModal').modal('show');
    }
    

    function enrollEvent(eventId) {
        console.log("Enrolling...");

        fetch(`/api/enroll/${eventId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                document.getElementById('signUpButton').style.display = 'none';
                document.getElementById('dropOutButton').style.display = 'inline-block';
            }
        })
        .catch(error => console.error('Error al inscribirse en el evento:', error));
    }

    function unenrollEvent(eventId) {
        console.log("Unenrolling...");

        fetch(`/api/enroll/${eventId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                document.getElementById('signUpButton').style.display = 'inline-block';
                document.getElementById('dropOutButton').style.display = 'none';
            }
        })
        .catch(error => console.error('Error al cancelar la inscripción del evento:', error));
    }

    document.addEventListener('DOMContentLoaded', () => {
        const scrollToTopButton = document.getElementById('scroll-to-top');
    
        // Mostrar/ocultar el botón según la posición del scroll
        window.addEventListener('scroll', () => {
            if (window.scrollY > 300) { // Mostrar el botón si el scroll está a más de 300px
                scrollToTopButton.style.display = 'flex';
            } else {
                scrollToTopButton.style.display = 'none';
            }
        });
    
        // Manejar el clic en el botón
        scrollToTopButton.addEventListener('click', () => {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
    });
    
</script>
