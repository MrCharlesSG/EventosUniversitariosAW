<style>

    .list-item {
        padding: 15px;
        cursor: pointer;
        display: flex;
        border-radius: 8px;
        flex-direction: column;
        margin-bottom: 5px;
    }    

    .add-event-btn {
        position: fixed;
        bottom: 5px;
        left: 5px;
    }

    .list-header {
        position: sticky;
        top: 0;
        z-index: 100; 
    }

    

</style>


<div class="">
    <div class="list-header">
        <h1><%= title %></h1>  
        <%- include("filterModal", { eventTypeList, facultyList }) %>       
    </div>

    </object>


    <div class="accordion mb-3" id="accordionPastEvents">
        
        <div class="card" >
            <div class="card-header " id="headingPastEvents">
                <h5 class="mb-0">
                    <button class="btn card-header-title " type="button" data-toggle="collapse" data-target="#collapsePastEvents" aria-expanded="false" aria-controls="collapsePastEvents">
                        <i class="bi bi-chevron-down"></i> Eventos Transcurridos
                    </button>
                </h5>
            </div>
            <div id="collapsePastEvents" class="collapse " aria-labelledby="headingPastEvents" data-parent="#accordionPastEvents">
                <div class="card-body">
                    <ul id="past-event-list" class="list-group list-unstyled mb-4"></ul>
                </div>
            </div>
        </div>
    </div>
    <div class="list-container">
        <ul id="event-list" class="list-unstyled"></ul>

        
    </div>
</div>

<button id="scroll-to-top" class="btn btn-outline-primary" style="display: none; position: fixed; bottom: 5px; right: 5px; z-index: 1000;">
    <i class="bi bi-chevron-up"></i>
</button>


<%- include("eventModal", { role: role, user: user }) %>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>


<script>

    
        const eventsData = [];

        const eventsDoneData = [];

        let appliedFilters = {};

        const currentUserId = '<%= user %>';
        
    
        $(document).ready(function () {
            const currentPath = window.location.pathname;
            const apiUrl = currentPath.includes('myevents') ? '/api/events/user' : '/api/events';
        
            const eventsData = [];
            let appliedFilters = {
                date: null,
                location: '',
                locationText: '',
                eventType: '',
                minCapacity: null,
                maxCapacity: null
            };
        
            console.log("Llamando a la API:", apiUrl, " por user ", currentUserId);
        
            $.ajax({
                url: apiUrl,
                method: 'GET',
                dataType: 'json',
                success: function (data) {
                    eventsData.push(...data);
                    renderEvents();
                },
                error: function (xhr, status, error) {
                    console.error("Error al cargar los eventos:", error);
                }
            });
        
            function renderEvents() {
                const $eventList = $('#event-list');
                const $pastEventList = $('#past-event-list');
            
                $eventList.empty();
                $pastEventList.empty();
            
                const now = new Date();
                const filteredEvents = eventsData.filter(event => {
                    const eventDate = new Date(event.DateTime);
                    return (    
                        (!appliedFilters.dateStart || new Date(event.TimeInit) >= new Date(appliedFilters.dateStart)) &&
                        (!appliedFilters.dateEnd || new Date(event.TimeEnd) <= new Date(appliedFilters.dateEnd)) &&
                        (!appliedFilters.location || appliedFilters.location == 'none' || event.FacultyID == appliedFilters.location) &&
                        (!appliedFilters.eventType || appliedFilters.eventType == 'none' || event.EventType == appliedFilters.eventType) &&
                        (!appliedFilters.minCapacity || event.Capacity >= appliedFilters.minCapacity) &&
                        (!appliedFilters.maxCapacity || event.Capacity <= appliedFilters.maxCapacity) &&
                        (!appliedFilters.status || appliedFilters.status.length === 0 || 
                            (appliedFilters.status.includes('cancelled') && (event.Status === null && event.OrganizerID != currentUserId || event.Status == 'cancelled')) ||
                            appliedFilters.status.includes(event.Status))
                    );
                });
            
                console.log(filteredEvents)
            
                filteredEvents.forEach(event => {
                    console.log(event)
                    const isPastEvent = new Date(event.TimeInit) < now;
            
                    let badgeClass = '';
                    let badgeText = '';
            
                    if (event.OrganizerID !== currentUserId) {
                        switch (event.Status) {
                            case 'confirmed':
                                badgeClass = 'badge-success';
                                badgeText = 'Inscrito';
                                break;
                            case 'waiting':
                                badgeClass = 'badge-warning';
                                badgeText = 'En Cola';
                                break;
                            default:
                                badgeClass = 'badge-danger';
                                badgeText = 'No Inscrito';
                        }
                    }
            
                    const enrollmentInfo = ``;
            
                    const eventItem = `
                        <li class="list-item" 
                            data-id="${event.ID}" 
                            data-organizer="${event.OrganizerID}"
                            data-title="${event.Title}" 
                            data-description="${event.Description}" 
                            data-date-init="${event.TimeInit}" 
                            data-date-end="${event.TimeEnd}" 
                            data-location-name="${event.FacultyName}" 
                            data-room-name="${event.RoomName}" 
                            data-location-university="${event.FacultyUniversity}" 
                            data-capacity="${event.Capacity}" 
                            data-event-type="${event.EventType}"
                            data-enrollment-count="${event.EnrollmentCount}" 
                            data-enrollment-status="${event.Status}"
                            tabindex="0">
                            
                            <div class="list-item-important-title">
                                ${event.Title} ${badgeText ? `<span class="badge ${badgeClass}">${badgeText}</span>` : ''}
                            </div>
                            <div class="list-item-important-meta">${event.Description}</div>
                            <div class="list-item-important-meta d-flex flex-wrap justify-content-between">
                                <span>
                                    <i class="bi bi-calendar-event"></i> 
                                    ${new Intl.DateTimeFormat('es-ES', { dateStyle: 'long', timeStyle: 'short' }).format(new Date(event.TimeInit))}
                                </span>
                                <span>
                                    <i class="bi bi-clock"></i> 
                                    ${calculateDuration(event.TimeInit, event.TimeEnd)}
                                </span>
                                <span>
                                    <i class="bi bi-geo"></i> ${event.FacultyName}, ${event.FacultyUniversity}
                                </span>
                                <span>
                                    <i class="bi bi-tags"></i> ${event.EventType}
                                </span>
                                <span>
                                    <i class="bi bi-hash"></i> ${event.EnrollmentCount} / ${event.Capacity} inscritos
                                </span>
                            </div>
                        </li>
                    `;
            
                    if (isPastEvent) {
                        $pastEventList.append(eventItem);
                    } else {
                        $eventList.append(eventItem);
                    }
                });
            
                $('.list-item').on('click', function () {
                    const $item = $(this);
                    console.log("Lllamand9oooo")
                    const eventData = {
                        eventId: $item.data('id'),
                        title: $item.data('title'),
                        description: $item.data('description'),
                        initTime: $item.data('date-init'),
                        endTime: $item.data('date-end'),
                        location: `${$item.data('location-name')}, ${$item.data('location-university')}`,
                        roomName: $item.data('room-name'),
                        organizer: $item.data('organizer'),
                        eventType: $item.data('event-type'),
                        enrollmentCount: $item.data('enrollment-count'),
                        capacity: $item.data('capacity'),
                        enrollmentStatus: $item.data('enrollment-status'),
                    };
                    console.log(eventData)
            
                    $('#eventModal').trigger('openEventModal', eventData);
                });
            }
            
            function calculateDuration(start, end) {
                const startDate = new Date(start);
                const endDate = new Date(end);
                const diffMs = endDate - startDate; 
            
                const hours = Math.floor(diffMs / (1000 * 60 * 60));
                const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
            
                if (hours > 0 && minutes > 0) {
                    return `${hours} horas y ${minutes} minutos`;
                } else if (hours > 0) {
                    return `${hours} horas`;
                } else {
                    return `${minutes} minutos`;
                }
            }
            
        
            $(document).on('filters:applied', function (e, filters) {
                console.log('filtrsa ', filters);
                appliedFilters = filters
                renderEvents();
            });

            $(document).on('filters:reset', function () {
        
                $('#filters-text').html('<span>Sin filtros</span>');
                appliedFilters = {}
        
                renderEvents();
            });
            
            $(document).on('updateEvents', function (e, { eventId, enrollmentCount, capacity, enrollmentStatus }) {
                console.log("recibido ", eventId, enrollmentCount, capacity, enrollmentStatus);
            
                const $eventItem = $(`[data-id="${eventId}"]`);
                $eventItem.data('enrollment-count', enrollmentCount);
                $eventItem.data('enrollment-status', enrollmentStatus);
            
                const badgeClass = enrollmentStatus === 'confirmed' ? 'badge-success' :
                                   enrollmentStatus === 'waiting' ? 'badge-warning' :
                                   'badge-danger';
                const badgeText = enrollmentStatus === 'confirmed' ? 'Inscrito' :
                                  enrollmentStatus === 'waiting' ? 'En Cola' :
                                  'No Inscrito';
            
                $eventItem.find('.list-item-important-title .badge')
                    .removeClass('badge-danger badge-warning badge-success')
                    .addClass(badgeClass)
                    .text(badgeText);
            
                const enrollmentInfo = `${enrollmentCount} / ${capacity} inscritos`;
                $eventItem.find('.bi-hash').parent().html(`<i class="bi bi-hash"></i> ${enrollmentInfo}`);
            });
            
            const $scrollToTopButton = $('#scroll-to-top');
            $(window).on('scroll', function () {
                if ($(window).scrollTop() > 300) {
                    $scrollToTopButton.fadeIn();
                } else {
                    $scrollToTopButton.fadeOut();
                }
            });
        
            $scrollToTopButton.on('click', function () {
                $('html, body').animate({ scrollTop: 0 }, 'smooth');
            });

            $(document).on('keydown', function (e) {
                const selectedEvent = $('.list-item:focus');
                if (selectedEvent.length === 0) return;
            
                const $item = $(selectedEvent);
                const eventId = $item.data('id');
            
                if (e.ctrlKey && e.key.toLowerCase() === 'd') {
                    e.preventDefault();
                    
                    const eventData = {
                        eventId: $item.data('id'),
                        title: $item.data('title'),
                        description: $item.data('description'),
                        initTime: $item.data('date-init'),
                        endTime: $item.data('date-end'),
                        location: `${$item.data('location-name')}, ${$item.data('location-university')}`,
                        roomName: $item.data('room-name'),
                        organizer: $item.data('organizer'),
                        eventType: $item.data('event-type'),
                        enrollmentCount: $item.data('enrollment-count'),
                        capacity: $item.data('capacity'),
                        enrollmentStatus: $item.data('enrollment-status'),
                    };
            
                    $('#eventModal').trigger('openEventModal', eventData);
                }
            
                if (e.ctrlKey && e.key.toLowerCase() === 'i') {
                    e.preventDefault();
            
                    const eventData = {
                        eventId: $item.data('id'),
                        enrollmentCount: $item.data('enrollment-count'),
                        capacity: $item.data('capacity'),
                    };
            
                    $('#eventModal').trigger('enrollEvent', eventData);
                }
            
                if (e.ctrlKey && e.key.toLowerCase() === 'u') {
                    e.preventDefault();
            
                    const eventData = {
                        eventId: $item.data('id'),
                        enrollmentCount: $item.data('enrollment-count'),
                        capacity: $item.data('capacity'),
                    };
            
                    $('#eventModal').trigger('unenrollEvent', eventData);
                }
            });
            
        
            //$(document).on('click', '.list-item', showEventModal);
        });
    
</script>
